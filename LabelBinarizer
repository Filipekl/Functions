from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.preprocessing import LabelBinarizer


class MyLabelBinarizer(BaseEstimator, TransformerMixin):
    def __init__(self, cat_variables, prefix_sep='_', sparse_output=False):
        self.cat_variables = cat_variables
        self.prefix_sep = prefix_sep
        self.sparse_output = sparse_output

    def fit(self, X):
        self.lbDict = {}
        self.classes_ = []
        for var in self.cat_variables:
            lb = LabelBinarizer(sparse_output=self.sparse_output)
            lb.fit(X[var].fillna('nan').astype('str'))
            self.lbDict[var] = lb
            classes = [var + self.prefix_sep + x for x in lb.classes_]
            self.classes_ += classes
        return self

    def transform(self, X):
        transformed = np.empty(X.shape)
        for var, lb in self.lbDict.items():
            transformedX = lb.transform(X[var].fillna('nan').astype('str'))
            transformed = np.append(transformed, transformedX, axis=1)
        return transformed
